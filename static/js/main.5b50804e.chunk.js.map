{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,kCAAKN,EAAMI,QAAQG,MAAnB,YCHKC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACpB,uBAAOC,KAAK,SACXb,UAAU,SAASW,YAAcA,EACjCG,SAAUF,MCsCDG,G,wDApCX,aAAe,IAAD,8BACV,gBAeJH,aAAe,SAAAI,GACX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IAJP,E,gEAUO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOtC,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpD,OACI,sBAAK9B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACZC,aAAce,KAAKf,eAC9B,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BlBI,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b50804e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}></Card>\r\n        ))}\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ( {placeholder, handleChange} ) => (\r\n     <input type='search'\r\n      className='search' placeholder= {placeholder}\r\n      onChange={handleChange}\r\n     />\r\n);\r\n\r\n\r\n\r\n","import React from 'react';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n        //this.handleChange = this.handleChange.bind(this);\n    }\n\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    handleChange = e => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase()))\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox placeholder='search monsters'\n                           handleChange={this.handleChange}/>\n                <CardList monsters={filteredMonsters}>\n                </CardList>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}